---------------------------------
where
---------------------------------

-- 

-- 급여가 10000이상이고 15000 이하인 사원의 정보
select *
from employees
where salary >= 10000
and salary <= 15000

--between 사용. between a nad b : a 와 b 사이의 값을 선택한다 (a,b포함) 앞부분이 작은수여야 한다
select *
from employees
where salary between 10000 and 15000;

--사원의 부서가 90,100,110,120,130,150에 소속된 사원의 정보를 출력

select *
from employees
where department_id =90
or department_id =100
or department_id =110
or department_id =120
or department_id =130
or department_id =150;

--in(컬럼,...) 사용.
select *
from employees
where department_id in(90,100,110,120,130,150);

--like 사용. 컬럼명 like '패턴',%(0개 이상 문자),_(한개 문자) // 김% =김 김형 김형태 김형태놈 등등 .. _병_ = 김병갑 이병을 박병정 등등..

--사원의 이름이 L로 시작하는 사원 정보를 출력
select *
from employees
where last_name like'L%';
--사원의 메일이 D로 시작하고 T로 끝나는 사원 정보를 출력
select *
from employees
where email like'D%T';
--이름이 'King' 인 사원
select *
from employees
where last_name ='King';



select last_name, salary, commission_pct
from employees;
--is null
--null은 미정의 값.
--null과의 산술연산의 결과는 null.
--null과의 비교연산의 결과는 false 해가 정해지지 않은 함수와 비슷. null + 숫자 = null

--커미션을 받지 않는 사원의 정보를 출력
select last_name, salary, commission_pct
from employees
where commission_pct is null;
--커미션을 받는 사원의 정보를 출력
select last_name, salary, commission_pct
from employees
where commission_pct is not null;
--사원의 연봉을 출력합니다.
--연봉은 급여 * 15 + 급여 * 15 * 커미션
--nvl(null이 들어있을 수 있는 컬럼, 널 대신 넣을 값)
select last_name, salary * 15 + salary * 15 * nvl(commission_pct,0) as year_sel
from employees;

---------------------------------
order by : asc(오름차순) desc(내림차순)
order by 표현식 컬럼명 정렬순서,표현식 컬럼명 정렬순서,...//정렬,정렬된 리스트 내에서 2차정렬,...
---------------------------------
--급여가 높은 사원부터 화면에 출력하시오
select last_name, salary
from employees
order by salary desc;
--급여가 낮은 사원부터 화면에 출력하시오
select last_name, salary
from employees
order by salary asc;

--사원의 정보를 출력합니다(이름,부서번호,급여)
--부서번호 순으로
select last_name,department_id,salary
from employees
order by department_id;
--사원의 정보를 출력합니다(이름,부서번호,급여)
--부서번호 순으로 출력하시오. 부서번호가 같은 사원들은 급여순으로 출력합니다.
select last_name,department_id,salary
from employees
order by department_id,salary;

--사원의 정보 출력. 단, 연봉이 많은 사원부터 출력
select last_name, salary, salary * 15 + salary * 15 * nvl(commission_pct,0) as year_sel
from employees
order by year_sel desc;

--중복제거
select distinct department_id
from employees;

---------------------------------
group by : 데이터를 소그룹으로 묶는다. //거진 통계정보에서 사용
그룹 함수 : 여러개의 데이터를 받아서 하나의 결과를 반환. 널값은 자동제외함
		  : count(표현식 컬럼명), sum(표현식 컬럼명) , max(표현식 컬럼명),
		    min(표현식 컬럼명), avg(표현식 컬럼명) ...
---------------------------------

--사원의 수를 반환,사원 월급의 총합,연봉의 총합,최소급여?,최대급여?,평균급여,커미션 총합
select count(last_name),sum(salary),sum(salary, salary * 15 + salary * 15 * nvl(commission_pct,0) as year_sel),min(salary),max(salary),avg(salary),sum(commission_pct)
from employees;
--50번 부서 사원들의 급여중 가장 많은 급여
select max(salary)
from employees
where department_id = 50;
--각 부서별 최대 급여를 화면에 출력하시오
select department_id, max(salary)
from employees
group by department_id;

--그룹바이로 묶으면 select절에서 함수없이 넣을 수 있는 컬럼은 거의 그룹바이로 묶은 값 뿐

create table t86_group (
    id varchar2(3),
    sal number,
    job_id varchar2(2),
    dept_id number
);  
  
insert into t86_group values('a', 1000, 'SA', 10);  
insert into t86_group values('b', 2000, 'CM', 30);  
insert into t86_group values('c', 3000, 'CM', 20);  
insert into t86_group values('d', 4000, 'LA', 10);  
insert into t86_group values('e', 3000, 'SA', 30);  
insert into t86_group values('f', 2000, 'SA', 10);  

select * 
from t86_group;

--각 직무별 사원수
select job_id,count(*)
from t86_group
group by job_id;

--
select dept_id,job_id,max(sal)
from t86_group
group by dept_id, job_id
order by dept_id, job_id;


---------------------------------
having where이 group by 전에 실행되므로 그룹바이로 묶으면 이걸로 제약조건 처리함
---------------------------------
--각 부서별 최대급여를 급여가 높은 순서대로 출력. 10000 밑은 거름

select department_id, max(salary) 최대급여
from employees
group by department_id
having max(salary) >= 10000
order by max(salary) desc ;

-- 100번보다 작은 부서중 최대급여를 급여가 높은 순서대로 출력. 5000 밑은 거름

select department_id, avg(salary)
from employees
where department_id < 100
group by department_id
having avg(salary) >= 5000
order by department_id;


실행순서 from(어느 장소에서) -> where(어떤 조건 하에) -> group by(무슨 그룹 안에서) -> having(어떤 조건 하에) -> select(무엇을 출력하나) -> order by(어떻게 정렬해서)
